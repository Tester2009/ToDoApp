# generated by chatgpt: https://chatgpt.com/share/7dd4715f-d361-4067-a32f-9b94bf2a4ddb
from flask import Flask, jsonify, request, abort, send_from_directory
from flask_cors import CORS
from pymongo import MongoClient
from bson import ObjectId
import os
import socket
from dotenv import load_dotenv
load_dotenv()

app = Flask(__name__)
CORS(app)  # Enable CORS for all origins

###
HOST_IP = os.getenv('HOST_IP')
HOST_PORT = os.getenv('HOST_PORT')
ENABLE_DEBUG = os.getenv('ENABLE_DEBUG')
MONGO_URL_FULLPATH = os.getenv('MONGO_URL_FULLPATH')
MONGO_DB_NAME = os.getenv('MONGO_DB_NAME')
MONGO_COLLECTION_NAME = os.getenv('MONGO_COLLECTION_NAME')
###

# Connect to MongoDB
client = MongoClient(MONGO_URL_FULLPATH)
db = client[MONGO_DB_NAME]
todos_collection = db[MONGO_COLLECTION_NAME]

# Function to convert ObjectId to string for JSON serialization
def todo_serializer(todo):
    todo['id'] = str(todo['_id'])
    del todo['_id']
    return todo

# Routes for CRUD operations

@app.route('/create', methods=['POST'])
def create_todo():
    if not request.json or 'title' not in request.json or 'description' not in request.json or 'status' not in request.json:
        abort(400, "Missing fields: title, description, status")
    
    todo = {
        'title': request.json['title'],
        'description': request.json['description'],
        'status': request.json['status']
    }
    result = todos_collection.insert_one(todo)
    todo['_id'] = result.inserted_id
    return jsonify(todo_serializer(todo)), 201

@app.route('/', methods=['GET'])
def get_todos():
    todos = [todo_serializer(todo) for todo in todos_collection.find()]
    return jsonify(todos)

@app.route('/<string:todo_id>', methods=['GET'])
def get_todo(todo_id):
    todo = todos_collection.find_one({'_id': ObjectId(todo_id)})
    if todo:
        return jsonify(todo_serializer(todo))
    else:
        abort(404, f"Todo with id {todo_id} not found")

@app.route('/update/<string:todo_id>', methods=['PUT'])
def update_todo(todo_id):
    todo = todos_collection.find_one({'_id': ObjectId(todo_id)})
    if not todo:
        abort(404, f"Todo with id {todo_id} not found")
    
    if not request.json:
        abort(400, "No data provided")
    
    update_data = {}
    if 'title' in request.json:
        update_data['title'] = request.json['title']
    if 'description' in request.json:
        update_data['description'] = request.json['description']
    if 'status' in request.json:
        update_data['status'] = request.json['status']
    
    todos_collection.update_one({'_id': ObjectId(todo_id)}, {'$set': update_data})
    updated_todo = todos_collection.find_one({'_id': ObjectId(todo_id)})
    return jsonify(todo_serializer(updated_todo))

@app.route('/delete/<string:todo_id>', methods=['DELETE'])
def delete_todo(todo_id):
    result = todos_collection.delete_one({'_id': ObjectId(todo_id)})
    if result.deleted_count == 1:
        return '', 204
    else:
        abort(404, f"Todo with id {todo_id} not found")

@app.route('/hostname')
def get_hostname():
    hostname = socket.gethostname()
    return f"Hostname: {hostname}"

# Explicitly handle /favicon.ico request
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

if __name__ == '__main__':
    app.run(debug=ENABLE_DEBUG, host=HOST_IP, port=HOST_PORT)