// generated by chatgpt: https://chatgpt.com/share/7dd4715f-d361-4067-a32f-9b94bf2a4ddb
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [todos, setTodos] = useState([]);
  const [newTodoTitle, setNewTodoTitle] = useState('');
  const [newTodoDescription, setNewTodoDescription] = useState('');
  const [newTodoStatus, setNewTodoStatus] = useState('pending');
  const [editTodoId, setEditTodoId] = useState('');
  const [editTodoTitle, setEditTodoTitle] = useState('');
  const [editTodoDescription, setEditTodoDescription] = useState('');
  const [editTodoStatus, setEditTodoStatus] = useState('pending');

  useEffect(() => {
    fetchTodos();
  }, []);

  const fetchTodos = async () => {
    try {
      const response = await axios.get('http://localhost:8000/api/');
      setTodos(response.data);
    } catch (error) {
      console.error('Error fetching todos:', error);
    }
  };

  const handleCreateTodo = async () => {
    try {
      await axios.post('http://localhost:8000/api/create', {
        title: newTodoTitle,
        description: newTodoDescription,
        status: newTodoStatus
      });
      setNewTodoTitle('');
      setNewTodoDescription('');
      setNewTodoStatus('pending');
      fetchTodos();
    } catch (error) {
      console.error('Error creating todo:', error);
    }
  };

  const handleEditTodo = async (todoId) => {
    try {
      await axios.put(`http://localhost:8000/api/update/${todoId}`, {
        title: editTodoTitle,
        description: editTodoDescription,
        status: editTodoStatus
      });
      setEditTodoId('');
      setEditTodoTitle('');
      setEditTodoDescription('');
      setEditTodoStatus('pending');
      fetchTodos();
    } catch (error) {
      console.error('Error updating todo:', error);
    }
  };

  const handleDeleteTodo = async (todoId) => {
    try {
      await axios.delete(`http://localhost:8000/api/delete/${todoId}`);
      fetchTodos();
    } catch (error) {
      console.error('Error deleting todo:', error);
    }
  };

  const setEditMode = (todo) => {
    setEditTodoId(todo.id);
    setEditTodoTitle(todo.title);
    setEditTodoDescription(todo.description);
    setEditTodoStatus(todo.status);
  };

  const cancelEditMode = () => {
    setEditTodoId('');
    setEditTodoTitle('');
    setEditTodoDescription('');
    setEditTodoStatus('pending');
  };

  const handleSaveEdit = () => {
    handleEditTodo(editTodoId);
    cancelEditMode();
  };

  return (
    <div className="App">
      <h1>Todo App</h1>

      {/* Add Todo Form */}
      <h2>Add Todo</h2>
      <input
        type="text"
        placeholder="Title"
        value={newTodoTitle}
        onChange={(e) => setNewTodoTitle(e.target.value)}
      />
      <input
        type="text"
        placeholder="Description"
        value={newTodoDescription}
        onChange={(e) => setNewTodoDescription(e.target.value)}
      />
      <select
        value={newTodoStatus}
        onChange={(e) => setNewTodoStatus(e.target.value)}
      >
        <option value="pending">Pending</option>
        <option value="completed">Completed</option>
      </select>
      <button onClick={handleCreateTodo}>Add Todo</button>

      {/* List Todos */}
      <h2>Todos</h2>
      <ul>
        {todos.map(todo => (
          <li key={todo.id}>
            {editTodoId === todo.id ? (
              <>
                <input
                  type="text"
                  placeholder="Title"
                  value={editTodoTitle}
                  onChange={(e) => setEditTodoTitle(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="Description"
                  value={editTodoDescription}
                  onChange={(e) => setEditTodoDescription(e.target.value)}
                />
                <select
                  value={editTodoStatus}
                  onChange={(e) => setEditTodoStatus(e.target.value)}
                >
                  <option value="pending">Pending</option>
                  <option value="completed">Completed</option>
                </select>
                <button onClick={handleSaveEdit}>Save</button>
                <button onClick={cancelEditMode}>Cancel</button>
              </>
            ) : (
              <>
                <strong>{todo.title}</strong> - {todo.description} - Status: {todo.status}
                <button onClick={() => setEditMode(todo)}>Edit</button>
                <button onClick={() => handleDeleteTodo(todo.id)}>Delete</button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
